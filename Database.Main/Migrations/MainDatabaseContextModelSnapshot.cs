// <auto-generated />
using System;
using System.Text.Json;
using Database.Main;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Main.Migrations
{
    [DbContext(typeof(MainDatabaseContext))]
    partial class MainDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Main.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ADDRESS")
                        .HasColumnType("text");

                    b.Property<string>("ADDRESS_NAME")
                        .HasColumnType("text");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<long>("NAME_LAST_UPDATED_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<string>("USER_NAME")
                        .HasColumnType("text");

                    b.Property<string>("USER_TITLE")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ADDRESS_NAME");

                    b.HasIndex("NAME_LAST_UPDATED_UNIX_SECONDS");

                    b.HasIndex("USER_NAME");

                    b.HasIndex("ChainId", "ADDRESS")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Database.Main.Block", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<string>("HEIGHT")
                        .HasColumnType("text");

                    b.Property<long>("TIMESTAMP_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("TIMESTAMP_UNIX_SECONDS");

                    b.HasIndex("ChainId", "HEIGHT");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Database.Main.Chain", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CURRENT_HEIGHT")
                        .HasColumnType("text");

                    b.Property<int?>("MainTokenId")
                        .HasColumnType("integer");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("MainTokenId")
                        .IsUnique();

                    b.HasIndex("NAME")
                        .IsUnique();

                    b.ToTable("Chains");
                });

            modelBuilder.Entity("Database.Main.Contract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<string>("HASH")
                        .HasColumnType("text");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.Property<string>("SYMBOL")
                        .HasColumnType("text");

                    b.Property<int?>("TokenId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ChainId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Database.Main.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("AddressID")
                        .HasColumnType("integer");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<bool>("BLACKLISTED")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BURNED")
                        .HasColumnType("boolean");

                    b.Property<string>("CONTRACT_AUCTION_ID")
                        .HasColumnType("text");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<long>("DATE_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<long>("DM_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<int>("EventKindId")
                        .HasColumnType("integer");

                    b.Property<bool>("HIDDEN")
                        .HasColumnType("boolean");

                    b.Property<int>("INDEX")
                        .HasColumnType("integer");

                    b.Property<string>("INFUSED_VALUE")
                        .HasColumnType("text");

                    b.Property<int?>("InfusedSymbolId")
                        .HasColumnType("integer");

                    b.Property<int?>("InfusionId")
                        .HasColumnType("integer");

                    b.Property<bool>("NSFW")
                        .HasColumnType("boolean");

                    b.Property<int?>("NftId")
                        .HasColumnType("integer");

                    b.Property<string>("PRICE")
                        .HasColumnType("text");

                    b.Property<decimal>("PRICE_USD")
                        .HasColumnType("numeric");

                    b.Property<int?>("QuoteSymbolId")
                        .HasColumnType("integer");

                    b.Property<int?>("SourceAddressId")
                        .HasColumnType("integer");

                    b.Property<long>("TIMESTAMP_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<int>("TOKEN_AMOUNT")
                        .HasColumnType("integer");

                    b.Property<string>("TOKEN_ID")
                        .HasColumnType("text");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("AddressId");

                    b.HasIndex("BLACKLISTED");

                    b.HasIndex("BURNED");

                    b.HasIndex("ChainId");

                    b.HasIndex("DATE_UNIX_SECONDS");

                    b.HasIndex("DM_UNIX_SECONDS");

                    b.HasIndex("EventKindId");

                    b.HasIndex("HIDDEN");

                    b.HasIndex("INDEX");

                    b.HasIndex("InfusedSymbolId");

                    b.HasIndex("InfusionId");

                    b.HasIndex("NSFW");

                    b.HasIndex("NftId");

                    b.HasIndex("PRICE_USD");

                    b.HasIndex("QuoteSymbolId");

                    b.HasIndex("SourceAddressId");

                    b.HasIndex("TIMESTAMP_UNIX_SECONDS");

                    b.HasIndex("ContractId", "TOKEN_ID");

                    b.HasIndex("TransactionId", "INDEX");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Database.Main.EventKind", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NAME");

                    b.HasIndex("ChainId", "NAME")
                        .IsUnique();

                    b.ToTable("EventKinds");
                });

            modelBuilder.Entity("Database.Main.FiatExchangeRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("SYMBOL")
                        .HasColumnType("text");

                    b.Property<decimal>("USD_PRICE")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.HasIndex("SYMBOL")
                        .IsUnique();

                    b.ToTable("FiatExchangeRates");
                });

            modelBuilder.Entity("Database.Main.Infusion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("KEY")
                        .HasColumnType("text");

                    b.Property<int>("NftId")
                        .HasColumnType("integer");

                    b.Property<int?>("TokenId")
                        .HasColumnType("integer");

                    b.Property<string>("VALUE")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("KEY");

                    b.HasIndex("NftId");

                    b.HasIndex("TokenId");

                    b.ToTable("Infusions");
                });

            modelBuilder.Entity("Database.Main.Nft", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("BLACKLISTED")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BURNED")
                        .HasColumnType("boolean");

                    b.Property<JsonDocument>("CHAIN_API_RESPONSE")
                        .HasColumnType("jsonb");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatorAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<long>("DM_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<string>("IMAGE")
                        .HasColumnType("text");

                    b.Property<string>("INFO_URL")
                        .HasColumnType("text");

                    b.Property<int?>("InfusedIntoId")
                        .HasColumnType("integer");

                    b.Property<bool?>("METADATA_UPDATE")
                        .HasColumnType("boolean");

                    b.Property<long>("MINT_DATE_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<int>("MINT_NUMBER")
                        .HasColumnType("integer");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.Property<bool>("NSFW")
                        .HasColumnType("boolean");

                    b.Property<JsonDocument>("OFFCHAIN_API_RESPONSE")
                        .HasColumnType("jsonb");

                    b.Property<string>("RAM")
                        .HasColumnType("text");

                    b.Property<string>("ROM")
                        .HasColumnType("text");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("integer");

                    b.Property<string>("TOKEN_ID")
                        .HasColumnType("text");

                    b.Property<string>("TOKEN_URI")
                        .HasColumnType("text");

                    b.Property<string>("VIDEO")
                        .HasColumnType("text");

                    b.Property<int>("VIEW_COUNT")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("BLACKLISTED");

                    b.HasIndex("BURNED");

                    b.HasIndex("ChainId");

                    b.HasIndex("CreatorAddressId");

                    b.HasIndex("DESCRIPTION");

                    b.HasIndex("DM_UNIX_SECONDS");

                    b.HasIndex("InfusedIntoId");

                    b.HasIndex("METADATA_UPDATE");

                    b.HasIndex("MINT_DATE_UNIX_SECONDS");

                    b.HasIndex("MINT_NUMBER");

                    b.HasIndex("NAME");

                    b.HasIndex("NSFW");

                    b.HasIndex("SeriesId");

                    b.HasIndex("ContractId", "TOKEN_ID")
                        .IsUnique();

                    b.HasIndex("ContractId", "TOKEN_URI");

                    b.ToTable("Nfts");
                });

            modelBuilder.Entity("Database.Main.NftOwnership", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AMOUNT")
                        .HasColumnType("integer");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<long>("LAST_CHANGE_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<int>("NftId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("NftId");

                    b.HasIndex("AddressId", "NftId")
                        .IsUnique();

                    b.ToTable("NftOwnerships");
                });

            modelBuilder.Entity("Database.Main.Series", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ATTR_TYPE_1")
                        .HasColumnType("text");

                    b.Property<string>("ATTR_TYPE_2")
                        .HasColumnType("text");

                    b.Property<string>("ATTR_TYPE_3")
                        .HasColumnType("text");

                    b.Property<string>("ATTR_VALUE_1")
                        .HasColumnType("text");

                    b.Property<string>("ATTR_VALUE_2")
                        .HasColumnType("text");

                    b.Property<string>("ATTR_VALUE_3")
                        .HasColumnType("text");

                    b.Property<bool?>("BLACKLISTED")
                        .HasColumnType("boolean");

                    b.Property<int>("CURRENT_SUPPLY")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatorAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<long>("DM_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<bool>("HAS_LOCKED")
                        .HasColumnType("boolean");

                    b.Property<string>("IMAGE")
                        .HasColumnType("text");

                    b.Property<int>("MAX_SUPPLY")
                        .HasColumnType("integer");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.Property<bool?>("NSFW")
                        .HasColumnType("boolean");

                    b.Property<decimal>("ROYALTIES")
                        .HasColumnType("numeric");

                    b.Property<string>("SERIES_ID")
                        .HasColumnType("text");

                    b.Property<int?>("SeriesModeId")
                        .HasColumnType("integer");

                    b.Property<int>("TYPE")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("BLACKLISTED");

                    b.HasIndex("CreatorAddressId");

                    b.HasIndex("DESCRIPTION");

                    b.HasIndex("DM_UNIX_SECONDS");

                    b.HasIndex("HAS_LOCKED");

                    b.HasIndex("NAME");

                    b.HasIndex("NSFW");

                    b.HasIndex("SERIES_ID");

                    b.HasIndex("SeriesModeId");

                    b.HasIndex("TYPE");

                    b.HasIndex("ContractId", "SERIES_ID")
                        .IsUnique();

                    b.ToTable("Serieses");
                });

            modelBuilder.Entity("Database.Main.SeriesMode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("MODE_NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("MODE_NAME");

                    b.ToTable("SeriesModes");
                });

            modelBuilder.Entity("Database.Main.Token", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Chain2Id")
                        .HasColumnType("integer");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int?>("DECIMALS")
                        .HasColumnType("integer");

                    b.Property<bool?>("FUNGIBLE")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PRICE_AUD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_CAD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_CNY")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_EUR")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_GBP")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_JPY")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_RUB")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_USD")
                        .HasColumnType("numeric");

                    b.Property<string>("SYMBOL")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("SYMBOL");

                    b.HasIndex("ChainId", "ContractId", "SYMBOL")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Database.Main.TokenDailyPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<long>("DATE_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PRICE_AUD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_CAD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_CNY")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_ETH")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_EUR")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_GBP")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_JPY")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_NEO")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_RUB")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_SOUL")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_USD")
                        .HasColumnType("numeric");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("DATE_UNIX_SECONDS");

                    b.HasIndex("TokenId");

                    b.ToTable("TokenDailyPrices");
                });

            modelBuilder.Entity("Database.Main.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<string>("HASH")
                        .HasColumnType("text");

                    b.Property<int>("INDEX")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("HASH");

                    b.HasIndex("BlockId", "INDEX");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Database.Main.Address", b =>
                {
                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Addresses")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("Database.Main.Block", b =>
                {
                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Blocks")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("Database.Main.Chain", b =>
                {
                    b.HasOne("Database.Main.Token", "MainToken")
                        .WithOne("Chain2")
                        .HasForeignKey("Database.Main.Chain", "MainTokenId");

                    b.Navigation("MainToken");
                });

            modelBuilder.Entity("Database.Main.Contract", b =>
                {
                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Contracts")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("Database.Main.Event", b =>
                {
                    b.HasOne("Database.Main.Address", null)
                        .WithMany("Events")
                        .HasForeignKey("AddressID");

                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Events")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Contract", "Contract")
                        .WithMany("Events")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.EventKind", "EventKind")
                        .WithMany("Events")
                        .HasForeignKey("EventKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Token", "InfusedSymbol")
                        .WithMany("InfusionEvents")
                        .HasForeignKey("InfusedSymbolId");

                    b.HasOne("Database.Main.Infusion", "Infusion")
                        .WithMany("Events")
                        .HasForeignKey("InfusionId");

                    b.HasOne("Database.Main.Nft", "Nft")
                        .WithMany("Events")
                        .HasForeignKey("NftId");

                    b.HasOne("Database.Main.Token", "QuoteSymbol")
                        .WithMany("Events")
                        .HasForeignKey("QuoteSymbolId");

                    b.HasOne("Database.Main.Address", "SourceAddress")
                        .WithMany()
                        .HasForeignKey("SourceAddressId");

                    b.HasOne("Database.Main.Transaction", "Transaction")
                        .WithMany("Events")
                        .HasForeignKey("TransactionId");

                    b.Navigation("Address");

                    b.Navigation("Chain");

                    b.Navigation("Contract");

                    b.Navigation("EventKind");

                    b.Navigation("InfusedSymbol");

                    b.Navigation("Infusion");

                    b.Navigation("Nft");

                    b.Navigation("QuoteSymbol");

                    b.Navigation("SourceAddress");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Database.Main.EventKind", b =>
                {
                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("EventKinds")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("Database.Main.Infusion", b =>
                {
                    b.HasOne("Database.Main.Nft", "Nft")
                        .WithMany("Infusions")
                        .HasForeignKey("NftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Token", "Token")
                        .WithMany("Infusions")
                        .HasForeignKey("TokenId");

                    b.Navigation("Nft");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Database.Main.Nft", b =>
                {
                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Nfts")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Contract", "Contract")
                        .WithMany("Nfts")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Address", "CreatorAddress")
                        .WithMany("Nfts")
                        .HasForeignKey("CreatorAddressId");

                    b.HasOne("Database.Main.Nft", "InfusedInto")
                        .WithMany("InfusedNfts")
                        .HasForeignKey("InfusedIntoId");

                    b.HasOne("Database.Main.Series", "Series")
                        .WithMany("Nfts")
                        .HasForeignKey("SeriesId");

                    b.Navigation("Chain");

                    b.Navigation("Contract");

                    b.Navigation("CreatorAddress");

                    b.Navigation("InfusedInto");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Database.Main.NftOwnership", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany("NftOwnerships")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Nft", "Nft")
                        .WithMany("NftOwnerships")
                        .HasForeignKey("NftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Nft");
                });

            modelBuilder.Entity("Database.Main.Series", b =>
                {
                    b.HasOne("Database.Main.Contract", "Contract")
                        .WithMany("Series")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Address", "CreatorAddress")
                        .WithMany("Serieses")
                        .HasForeignKey("CreatorAddressId");

                    b.HasOne("Database.Main.SeriesMode", "SeriesMode")
                        .WithMany("Series")
                        .HasForeignKey("SeriesModeId");

                    b.Navigation("Contract");

                    b.Navigation("CreatorAddress");

                    b.Navigation("SeriesMode");
                });

            modelBuilder.Entity("Database.Main.Token", b =>
                {
                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Tokens")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Contract", "Contract")
                        .WithOne("Token")
                        .HasForeignKey("Database.Main.Token", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Database.Main.TokenDailyPrice", b =>
                {
                    b.HasOne("Database.Main.Token", "Token")
                        .WithMany("TokenDailyPrices")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Database.Main.Transaction", b =>
                {
                    b.HasOne("Database.Main.Block", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Database.Main.Address", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("NftOwnerships");

                    b.Navigation("Nfts");

                    b.Navigation("Serieses");
                });

            modelBuilder.Entity("Database.Main.Block", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Database.Main.Chain", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Blocks");

                    b.Navigation("Contracts");

                    b.Navigation("EventKinds");

                    b.Navigation("Events");

                    b.Navigation("Nfts");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Database.Main.Contract", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Nfts");

                    b.Navigation("Series");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Database.Main.EventKind", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Database.Main.Infusion", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Database.Main.Nft", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("InfusedNfts");

                    b.Navigation("Infusions");

                    b.Navigation("NftOwnerships");
                });

            modelBuilder.Entity("Database.Main.Series", b =>
                {
                    b.Navigation("Nfts");
                });

            modelBuilder.Entity("Database.Main.SeriesMode", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("Database.Main.Token", b =>
                {
                    b.Navigation("Chain2");

                    b.Navigation("Events");

                    b.Navigation("InfusionEvents");

                    b.Navigation("Infusions");

                    b.Navigation("TokenDailyPrices");
                });

            modelBuilder.Entity("Database.Main.Transaction", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
