// <auto-generated />
using System;
using System.Text.Json;
using Database.Main;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Main.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Main.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ADDRESS")
                        .HasColumnType("text");

                    b.Property<string>("ADDRESS_NAME")
                        .HasColumnType("text");

                    b.Property<int?>("AddressValidatorKindId")
                        .HasColumnType("integer");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<long>("NAME_LAST_UPDATED_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("STAKE")
                        .HasColumnType("text");

                    b.Property<string>("STAKE_RAW")
                        .HasColumnType("text");

                    b.Property<string>("UNCLAIMED")
                        .HasColumnType("text");

                    b.Property<string>("UNCLAIMED_RAW")
                        .HasColumnType("text");

                    b.Property<string>("USER_NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AddressValidatorKindId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ADDRESS", "ADDRESS_NAME");

                    b.HasIndex("ChainId", "ADDRESS")
                        .IsUnique();

                    b.HasIndex("ChainId", "NAME_LAST_UPDATED_UNIX_SECONDS");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Database.Main.AddressBalance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("AMOUNT")
                        .HasColumnType("text");

                    b.Property<string>("AMOUNT_RAW")
                        .HasColumnType("text");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.HasIndex("ChainId");

                    b.HasIndex("TokenId");

                    b.ToTable("AddressBalances");
                });

            modelBuilder.Entity("Database.Main.AddressEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("AddressEvents");
                });

            modelBuilder.Entity("Database.Main.AddressStake", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("AMOUNT")
                        .HasColumnType("text");

                    b.Property<string>("AMOUNT_RAW")
                        .HasColumnType("text");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<long>("TIME")
                        .HasColumnType("bigint");

                    b.Property<string>("UNCLAIMED")
                        .HasColumnType("text");

                    b.Property<string>("UNCLAIMED_RAW")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("AddressStakes");
                });

            modelBuilder.Entity("Database.Main.AddressStorage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<long>("AVAILABLE")
                        .HasColumnType("bigint");

                    b.Property<string>("AVATAR")
                        .HasColumnType("text");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<long>("USED")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("AddressStorages");
                });

            modelBuilder.Entity("Database.Main.AddressTransaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.HasIndex("TransactionId");

                    b.ToTable("AddressTransactions");
                });

            modelBuilder.Entity("Database.Main.AddressValidatorKind", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NAME");

                    b.ToTable("AddressValidatorKinds");
                });

            modelBuilder.Entity("Database.Main.Block", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ChainAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<string>("HASH")
                        .HasColumnType("text");

                    b.Property<string>("HEIGHT")
                        .HasColumnType("text");

                    b.Property<string>("PREVIOUS_HASH")
                        .HasColumnType("text");

                    b.Property<int>("PROTOCOL")
                        .HasColumnType("integer");

                    b.Property<string>("REWARD")
                        .HasColumnType("text");

                    b.Property<long>("TIMESTAMP_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<int>("ValidatorAddressId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ChainAddressId");

                    b.HasIndex("HASH")
                        .IsUnique();

                    b.HasIndex("TIMESTAMP_UNIX_SECONDS");

                    b.HasIndex("ValidatorAddressId");

                    b.HasIndex("ChainId", "HEIGHT");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Database.Main.BlockOracle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<int>("OracleId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("BlockId");

                    b.HasIndex("OracleId");

                    b.ToTable("BlockOracles");
                });

            modelBuilder.Entity("Database.Main.Chain", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CURRENT_HEIGHT")
                        .HasColumnType("text");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NAME")
                        .IsUnique();

                    b.ToTable("Chains");
                });

            modelBuilder.Entity("Database.Main.ChainEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.Property<string>("VALUE")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ChainId");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("ChainEvents");
                });

            modelBuilder.Entity("Database.Main.Contract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContractMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreateEventId")
                        .HasColumnType("integer");

                    b.Property<string>("HASH")
                        .HasColumnType("text");

                    b.Property<long>("LAST_UPDATED_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.Property<string>("SCRIPT_RAW")
                        .HasColumnType("text");

                    b.Property<string>("SYMBOL")
                        .HasColumnType("text");

                    b.Property<int?>("TokenId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.HasIndex("ChainId");

                    b.HasIndex("ContractMethodId");

                    b.HasIndex("CreateEventId")
                        .IsUnique();

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Database.Main.ContractMethod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<JsonElement>("METHODS")
                        .HasColumnType("jsonb");

                    b.Property<long>("TIMESTAMP_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractMethods");
                });

            modelBuilder.Entity("Database.Main.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<bool>("BLACKLISTED")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BURNED")
                        .HasColumnType("boolean");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<long>("DATE_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<long>("DM_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<int>("EventKindId")
                        .HasColumnType("integer");

                    b.Property<int>("INDEX")
                        .HasColumnType("integer");

                    b.Property<bool>("NSFW")
                        .HasColumnType("boolean");

                    b.Property<int?>("NftId")
                        .HasColumnType("integer");

                    b.Property<long>("TIMESTAMP_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<string>("TOKEN_ID")
                        .HasColumnType("text");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.HasIndex("ChainId");

                    b.HasIndex("DATE_UNIX_SECONDS");

                    b.HasIndex("EventKindId");

                    b.HasIndex("NftId");

                    b.HasIndex("TIMESTAMP_UNIX_SECONDS");

                    b.HasIndex("TransactionId");

                    b.HasIndex("BURNED", "EventKindId");

                    b.HasIndex("ContractId", "TOKEN_ID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Database.Main.EventKind", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ChainId", "NAME")
                        .IsUnique();

                    b.ToTable("EventKinds");
                });

            modelBuilder.Entity("Database.Main.External", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("HASH")
                        .HasColumnType("text");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("PlatformId");

                    b.HasIndex("TokenId");

                    b.ToTable("Externals");
                });

            modelBuilder.Entity("Database.Main.FiatExchangeRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("SYMBOL")
                        .HasColumnType("text");

                    b.Property<decimal>("USD_PRICE")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.HasIndex("SYMBOL")
                        .IsUnique();

                    b.HasIndex("SYMBOL", "USD_PRICE");

                    b.ToTable("FiatExchangeRates");
                });

            modelBuilder.Entity("Database.Main.GasEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("AMOUNT")
                        .HasColumnType("text");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("FEE")
                        .HasColumnType("text");

                    b.Property<string>("PRICE")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("GasEvents");
                });

            modelBuilder.Entity("Database.Main.HashEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("HASH")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("HashEvents");
                });

            modelBuilder.Entity("Database.Main.Infusion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("KEY")
                        .HasColumnType("text");

                    b.Property<int>("NftId")
                        .HasColumnType("integer");

                    b.Property<int?>("TokenId")
                        .HasColumnType("integer");

                    b.Property<string>("VALUE")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("KEY");

                    b.HasIndex("NftId");

                    b.HasIndex("TokenId");

                    b.ToTable("Infusions");
                });

            modelBuilder.Entity("Database.Main.InfusionEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("BaseTokenId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("INFUSED_VALUE")
                        .HasColumnType("text");

                    b.Property<string>("INFUSED_VALUE_RAW")
                        .HasColumnType("text");

                    b.Property<int>("InfusedTokenId")
                        .HasColumnType("integer");

                    b.Property<int?>("InfusionId")
                        .HasColumnType("integer");

                    b.Property<string>("TOKEN_ID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("BaseTokenId");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("InfusedTokenId");

                    b.HasIndex("InfusionId");

                    b.HasIndex("TOKEN_ID");

                    b.ToTable("InfusionEvents");
                });

            modelBuilder.Entity("Database.Main.MarketEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("BaseTokenId")
                        .HasColumnType("integer");

                    b.Property<string>("END_PRICE")
                        .HasColumnType("text");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("MARKET_ID")
                        .HasColumnType("text");

                    b.Property<int>("MarketEventKindId")
                        .HasColumnType("integer");

                    b.Property<string>("PRICE")
                        .HasColumnType("text");

                    b.Property<int>("QuoteTokenId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("BaseTokenId");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("MarketEventKindId");

                    b.HasIndex("QuoteTokenId");

                    b.ToTable("MarketEvents");
                });

            modelBuilder.Entity("Database.Main.MarketEventFiatPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FIAT_NAME")
                        .HasColumnType("text");

                    b.Property<int>("MarketEventId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PRICE_END_USD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_USD")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.HasIndex("MarketEventId")
                        .IsUnique();

                    b.HasIndex("PRICE_END_USD", "PRICE_USD");

                    b.ToTable("MarketEventFiatPrices");
                });

            modelBuilder.Entity("Database.Main.MarketEventKind", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NAME");

                    b.HasIndex("ChainId", "NAME")
                        .IsUnique();

                    b.ToTable("MarketEventKinds");
                });

            modelBuilder.Entity("Database.Main.Nft", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("BLACKLISTED")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BURNED")
                        .HasColumnType("boolean");

                    b.Property<JsonDocument>("CHAIN_API_RESPONSE")
                        .HasColumnType("jsonb");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatorAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<long>("DM_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<string>("IMAGE")
                        .HasColumnType("text");

                    b.Property<string>("INFO_URL")
                        .HasColumnType("text");

                    b.Property<int?>("InfusedIntoId")
                        .HasColumnType("integer");

                    b.Property<bool?>("METADATA_UPDATE")
                        .HasColumnType("boolean");

                    b.Property<long>("MINT_DATE_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<int>("MINT_NUMBER")
                        .HasColumnType("integer");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.Property<bool>("NSFW")
                        .HasColumnType("boolean");

                    b.Property<JsonDocument>("OFFCHAIN_API_RESPONSE")
                        .HasColumnType("jsonb");

                    b.Property<string>("RAM")
                        .HasColumnType("text");

                    b.Property<string>("ROM")
                        .HasColumnType("text");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("integer");

                    b.Property<string>("TOKEN_ID")
                        .HasColumnType("text");

                    b.Property<string>("TOKEN_URI")
                        .HasColumnType("text");

                    b.Property<string>("VIDEO")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("BURNED");

                    b.HasIndex("ChainId");

                    b.HasIndex("CreatorAddressId");

                    b.HasIndex("DM_UNIX_SECONDS");

                    b.HasIndex("InfusedIntoId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TOKEN_ID");

                    b.HasIndex("ContractId", "TOKEN_ID")
                        .IsUnique();

                    b.HasIndex("ContractId", "TOKEN_URI");

                    b.ToTable("Nfts");
                });

            modelBuilder.Entity("Database.Main.NftOwnership", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AMOUNT")
                        .HasColumnType("integer");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<long>("LAST_CHANGE_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<int>("NftId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("LAST_CHANGE_UNIX_SECONDS");

                    b.HasIndex("NftId");

                    b.HasIndex("AddressId", "NftId")
                        .IsUnique();

                    b.ToTable("NftOwnerships");
                });

            modelBuilder.Entity("Database.Main.Oracle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CONTENT")
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("URL", "CONTENT")
                        .IsUnique();

                    b.ToTable("Oracles");
                });

            modelBuilder.Entity("Database.Main.Organization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("CreateEventId")
                        .HasColumnType("integer");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.Property<string>("ORGANIZATION_ID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CreateEventId")
                        .IsUnique();

                    b.HasIndex("NAME")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Database.Main.OrganizationAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationAddresses");
                });

            modelBuilder.Entity("Database.Main.OrganizationEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationEvents");
                });

            modelBuilder.Entity("Database.Main.Platform", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CHAIN")
                        .HasColumnType("text");

                    b.Property<int?>("CreateEventId")
                        .HasColumnType("integer");

                    b.Property<string>("FUEL")
                        .HasColumnType("text");

                    b.Property<bool>("HIDDEN")
                        .HasColumnType("boolean");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CreateEventId")
                        .IsUnique();

                    b.HasIndex("NAME")
                        .IsUnique();

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Database.Main.PlatformInterop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("EXTERNAL")
                        .HasColumnType("text");

                    b.Property<int>("LocalAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("LocalAddressId");

                    b.HasIndex("PlatformId");

                    b.ToTable("PlatformInterops");
                });

            modelBuilder.Entity("Database.Main.PlatformToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("NAME");

                    b.HasIndex("PlatformId");

                    b.ToTable("PlatformTokens");
                });

            modelBuilder.Entity("Database.Main.SaleEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("HASH")
                        .HasColumnType("text");

                    b.Property<int>("SaleEventKindId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("SaleEventKindId");

                    b.ToTable("SaleEvents");
                });

            modelBuilder.Entity("Database.Main.SaleEventKind", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NAME");

                    b.HasIndex("ChainId", "NAME")
                        .IsUnique();

                    b.ToTable("SaleEventKinds");
                });

            modelBuilder.Entity("Database.Main.Series", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ATTR_TYPE_1")
                        .HasColumnType("text");

                    b.Property<string>("ATTR_TYPE_2")
                        .HasColumnType("text");

                    b.Property<string>("ATTR_TYPE_3")
                        .HasColumnType("text");

                    b.Property<string>("ATTR_VALUE_1")
                        .HasColumnType("text");

                    b.Property<string>("ATTR_VALUE_2")
                        .HasColumnType("text");

                    b.Property<string>("ATTR_VALUE_3")
                        .HasColumnType("text");

                    b.Property<bool?>("BLACKLISTED")
                        .HasColumnType("boolean");

                    b.Property<int>("CURRENT_SUPPLY")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatorAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<long>("DM_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<bool>("HAS_LOCKED")
                        .HasColumnType("boolean");

                    b.Property<string>("IMAGE")
                        .HasColumnType("text");

                    b.Property<int>("MAX_SUPPLY")
                        .HasColumnType("integer");

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.Property<bool?>("NSFW")
                        .HasColumnType("boolean");

                    b.Property<decimal>("ROYALTIES")
                        .HasColumnType("numeric");

                    b.Property<string>("SERIES_ID")
                        .HasColumnType("text");

                    b.Property<int?>("SeriesModeId")
                        .HasColumnType("integer");

                    b.Property<int>("TYPE")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CreatorAddressId");

                    b.HasIndex("SERIES_ID");

                    b.HasIndex("SeriesModeId");

                    b.HasIndex("ContractId", "SERIES_ID")
                        .IsUnique();

                    b.ToTable("Serieses");
                });

            modelBuilder.Entity("Database.Main.SeriesMode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("MODE_NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("MODE_NAME")
                        .IsUnique();

                    b.ToTable("SeriesModes");
                });

            modelBuilder.Entity("Database.Main.Signature", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("DATA")
                        .HasColumnType("text");

                    b.Property<int>("SignatureKindId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("SignatureKindId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("Database.Main.SignatureKind", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NAME");

                    b.ToTable("SignatureKinds");
                });

            modelBuilder.Entity("Database.Main.StringEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("STRING_VALUE")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("StringEvents");
                });

            modelBuilder.Entity("Database.Main.Token", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<bool>("BURNABLE")
                        .HasColumnType("boolean");

                    b.Property<string>("BURNED_SUPPLY")
                        .HasColumnType("text");

                    b.Property<string>("BURNED_SUPPLY_RAW")
                        .HasColumnType("text");

                    b.Property<string>("CURRENT_SUPPLY")
                        .HasColumnType("text");

                    b.Property<string>("CURRENT_SUPPLY_RAW")
                        .HasColumnType("text");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreateEventId")
                        .HasColumnType("integer");

                    b.Property<int>("DECIMALS")
                        .HasColumnType("integer");

                    b.Property<bool>("DIVISIBLE")
                        .HasColumnType("boolean");

                    b.Property<bool>("FIAT")
                        .HasColumnType("boolean");

                    b.Property<bool>("FINITE")
                        .HasColumnType("boolean");

                    b.Property<bool>("FUEL")
                        .HasColumnType("boolean");

                    b.Property<bool>("FUNGIBLE")
                        .HasColumnType("boolean");

                    b.Property<string>("MAX_SUPPLY")
                        .HasColumnType("text");

                    b.Property<string>("MAX_SUPPLY_RAW")
                        .HasColumnType("text");

                    b.Property<bool>("MINTABLE")
                        .HasColumnType("boolean");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PRICE_AUD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_CAD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_CNY")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_EUR")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_GBP")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_JPY")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_RUB")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_USD")
                        .HasColumnType("numeric");

                    b.Property<string>("SCRIPT_RAW")
                        .HasColumnType("text");

                    b.Property<bool>("STAKABLE")
                        .HasColumnType("boolean");

                    b.Property<bool>("SWAPPABLE")
                        .HasColumnType("boolean");

                    b.Property<string>("SYMBOL")
                        .HasColumnType("text");

                    b.Property<bool>("TRANSFERABLE")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreateEventId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.HasIndex("SYMBOL", "ChainId");

                    b.HasIndex("ChainId", "ContractId", "SYMBOL")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Database.Main.TokenDailyPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<long>("DATE_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PRICE_AUD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_CAD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_CNY")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_ETH")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_EUR")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_GBP")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_JPY")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_NEO")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_RUB")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_SOUL")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PRICE_USD")
                        .HasColumnType("numeric");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("DATE_UNIX_SECONDS");

                    b.HasIndex("TokenId");

                    b.ToTable("TokenDailyPrices");
                });

            modelBuilder.Entity("Database.Main.TokenEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CHAIN_NAME")
                        .HasColumnType("text");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.Property<string>("VALUE")
                        .HasColumnType("text");

                    b.Property<string>("VALUE_RAW")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("TokenId");

                    b.ToTable("TokenEvents");
                });

            modelBuilder.Entity("Database.Main.TokenLogo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.Property<int>("TokenLogoTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("TokenLogoTypeId");

                    b.HasIndex("TokenId", "TokenLogoTypeId")
                        .IsUnique();

                    b.ToTable("TokenLogos");
                });

            modelBuilder.Entity("Database.Main.TokenLogoType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NAME");

                    b.ToTable("TokenLogoTypes");
                });

            modelBuilder.Entity("Database.Main.TokenPriceState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("COIN_GECKO")
                        .HasColumnType("boolean");

                    b.Property<long>("LAST_CHECK_DATE_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("LAST_CHECK_DATE_UNIX_SECONDS");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("TokenPriceStates");
                });

            modelBuilder.Entity("Database.Main.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<long>("EXPIRATION")
                        .HasColumnType("bigint");

                    b.Property<string>("FEE")
                        .HasColumnType("text");

                    b.Property<string>("FEE_RAW")
                        .HasColumnType("text");

                    b.Property<string>("GAS_LIMIT")
                        .HasColumnType("text");

                    b.Property<string>("GAS_LIMIT_RAW")
                        .HasColumnType("text");

                    b.Property<string>("GAS_PRICE")
                        .HasColumnType("text");

                    b.Property<string>("GAS_PRICE_RAW")
                        .HasColumnType("text");

                    b.Property<int>("GasPayerId")
                        .HasColumnType("integer");

                    b.Property<int>("GasTargetId")
                        .HasColumnType("integer");

                    b.Property<string>("HASH")
                        .HasColumnType("text");

                    b.Property<int>("INDEX")
                        .HasColumnType("integer");

                    b.Property<string>("PAYLOAD")
                        .HasColumnType("text");

                    b.Property<string>("RESULT")
                        .HasColumnType("text");

                    b.Property<string>("SCRIPT_RAW")
                        .HasColumnType("text");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<long>("TIMESTAMP_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("GasPayerId");

                    b.HasIndex("GasTargetId");

                    b.HasIndex("HASH");

                    b.HasIndex("SenderId");

                    b.HasIndex("StateId");

                    b.HasIndex("TIMESTAMP_UNIX_SECONDS");

                    b.HasIndex("BlockId", "INDEX");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Database.Main.TransactionSettleEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("HASH")
                        .HasColumnType("text");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("PlatformId");

                    b.ToTable("TransactionSettleEvents");
                });

            modelBuilder.Entity("Database.Main.TransactionState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NAME");

                    b.ToTable("TransactionStates");
                });

            modelBuilder.Entity("Database.Main.Address", b =>
                {
                    b.HasOne("Database.Main.AddressValidatorKind", "AddressValidatorKind")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressValidatorKindId");

                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Addresses")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Organization", "Organization")
                        .WithMany("Addresses")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("AddressValidatorKind");

                    b.Navigation("Chain");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Database.Main.AddressBalance", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany("AddressBalances")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("AddressBalances")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Token", "Token")
                        .WithMany("AddressBalances")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Chain");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Database.Main.AddressEvent", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany("AddressEvents")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Event", "Event")
                        .WithOne("AddressEvent")
                        .HasForeignKey("Database.Main.AddressEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Database.Main.AddressStake", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithOne("AddressStake")
                        .HasForeignKey("Database.Main.AddressStake", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Database.Main.AddressStorage", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithOne("AddressStorage")
                        .HasForeignKey("Database.Main.AddressStorage", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Database.Main.AddressTransaction", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany("AddressTransactions")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Transaction", "Transaction")
                        .WithMany("AddressTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Database.Main.Block", b =>
                {
                    b.HasOne("Database.Main.Address", "ChainAddress")
                        .WithMany("ChainAddressBlocks")
                        .HasForeignKey("ChainAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Blocks")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Address", "ValidatorAddress")
                        .WithMany("ValidatorAddressBlocks")
                        .HasForeignKey("ValidatorAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");

                    b.Navigation("ChainAddress");

                    b.Navigation("ValidatorAddress");
                });

            modelBuilder.Entity("Database.Main.BlockOracle", b =>
                {
                    b.HasOne("Database.Main.Block", "Block")
                        .WithMany("BlockOracles")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Oracle", "Oracle")
                        .WithMany("BlockOracles")
                        .HasForeignKey("OracleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Oracle");
                });

            modelBuilder.Entity("Database.Main.ChainEvent", b =>
                {
                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("ChainEvents")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Event", "Event")
                        .WithOne("ChainEvent")
                        .HasForeignKey("Database.Main.ChainEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Database.Main.Contract", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany("Contracts")
                        .HasForeignKey("AddressId");

                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Contracts")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.ContractMethod", "ContractMethod")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractMethodId");

                    b.HasOne("Database.Main.Event", "CreateEvent")
                        .WithOne("CreateContract")
                        .HasForeignKey("Database.Main.Contract", "CreateEventId");

                    b.HasOne("Database.Main.Token", "Token")
                        .WithOne("Contract")
                        .HasForeignKey("Database.Main.Contract", "TokenId");

                    b.Navigation("Address");

                    b.Navigation("Chain");

                    b.Navigation("ContractMethod");

                    b.Navigation("CreateEvent");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Database.Main.ContractMethod", b =>
                {
                    b.HasOne("Database.Main.Contract", "Contract")
                        .WithMany("ContractMethods")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Database.Main.Event", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany("Events")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Events")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Contract", "Contract")
                        .WithMany("Events")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.EventKind", "EventKind")
                        .WithMany("Events")
                        .HasForeignKey("EventKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Nft", "Nft")
                        .WithMany("Events")
                        .HasForeignKey("NftId");

                    b.HasOne("Database.Main.Transaction", "Transaction")
                        .WithMany("Events")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Chain");

                    b.Navigation("Contract");

                    b.Navigation("EventKind");

                    b.Navigation("Nft");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Database.Main.EventKind", b =>
                {
                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("EventKinds")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("Database.Main.External", b =>
                {
                    b.HasOne("Database.Main.Platform", "Platform")
                        .WithMany("Externals")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Token", "Token")
                        .WithMany("Externals")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Database.Main.GasEvent", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany("GasEvents")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Event", "Event")
                        .WithOne("GasEvent")
                        .HasForeignKey("Database.Main.GasEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Database.Main.HashEvent", b =>
                {
                    b.HasOne("Database.Main.Event", "Event")
                        .WithOne("HashEvent")
                        .HasForeignKey("Database.Main.HashEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Database.Main.Infusion", b =>
                {
                    b.HasOne("Database.Main.Nft", "Nft")
                        .WithMany("Infusions")
                        .HasForeignKey("NftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Token", "Token")
                        .WithMany("Infusions")
                        .HasForeignKey("TokenId");

                    b.Navigation("Nft");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Database.Main.InfusionEvent", b =>
                {
                    b.HasOne("Database.Main.Token", "BaseToken")
                        .WithMany("BaseSymbolInfusionEvents")
                        .HasForeignKey("BaseTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Event", "Event")
                        .WithOne("InfusionEvent")
                        .HasForeignKey("Database.Main.InfusionEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Token", "InfusedToken")
                        .WithMany("InfusedSymbolInfusionEvents")
                        .HasForeignKey("InfusedTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Infusion", "Infusion")
                        .WithMany("InfusionEvents")
                        .HasForeignKey("InfusionId");

                    b.Navigation("BaseToken");

                    b.Navigation("Event");

                    b.Navigation("InfusedToken");

                    b.Navigation("Infusion");
                });

            modelBuilder.Entity("Database.Main.MarketEvent", b =>
                {
                    b.HasOne("Database.Main.Token", "BaseToken")
                        .WithMany("BaseSymbolMarketEvents")
                        .HasForeignKey("BaseTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Event", "Event")
                        .WithOne("MarketEvent")
                        .HasForeignKey("Database.Main.MarketEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.MarketEventKind", "MarketEventKind")
                        .WithMany("MarketEvents")
                        .HasForeignKey("MarketEventKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Token", "QuoteToken")
                        .WithMany("QuoteSymbolMarketEvents")
                        .HasForeignKey("QuoteTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseToken");

                    b.Navigation("Event");

                    b.Navigation("MarketEventKind");

                    b.Navigation("QuoteToken");
                });

            modelBuilder.Entity("Database.Main.MarketEventFiatPrice", b =>
                {
                    b.HasOne("Database.Main.MarketEvent", "MarketEvent")
                        .WithOne("MarketEventFiatPrice")
                        .HasForeignKey("Database.Main.MarketEventFiatPrice", "MarketEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketEvent");
                });

            modelBuilder.Entity("Database.Main.MarketEventKind", b =>
                {
                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("MarketEventKinds")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("Database.Main.Nft", b =>
                {
                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Nfts")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Contract", "Contract")
                        .WithMany("Nfts")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Address", "CreatorAddress")
                        .WithMany("Nfts")
                        .HasForeignKey("CreatorAddressId");

                    b.HasOne("Database.Main.Nft", "InfusedInto")
                        .WithMany("InfusedNfts")
                        .HasForeignKey("InfusedIntoId");

                    b.HasOne("Database.Main.Series", "Series")
                        .WithMany("Nfts")
                        .HasForeignKey("SeriesId");

                    b.Navigation("Chain");

                    b.Navigation("Contract");

                    b.Navigation("CreatorAddress");

                    b.Navigation("InfusedInto");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Database.Main.NftOwnership", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany("NftOwnerships")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Nft", "Nft")
                        .WithMany("NftOwnerships")
                        .HasForeignKey("NftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Nft");
                });

            modelBuilder.Entity("Database.Main.Organization", b =>
                {
                    b.HasOne("Database.Main.Event", "CreateEvent")
                        .WithOne("CreateOrganization")
                        .HasForeignKey("Database.Main.Organization", "CreateEventId");

                    b.Navigation("CreateEvent");
                });

            modelBuilder.Entity("Database.Main.OrganizationAddress", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany("OrganizationAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Organization", "Organization")
                        .WithMany("OrganizationAddresses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Database.Main.OrganizationEvent", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany("OrganizationEvents")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Event", "Event")
                        .WithOne("OrganizationEvent")
                        .HasForeignKey("Database.Main.OrganizationEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Organization", "Organization")
                        .WithMany("OrganizationEvents")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Event");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Database.Main.Platform", b =>
                {
                    b.HasOne("Database.Main.Event", "CreateEvent")
                        .WithOne("CreatePlatform")
                        .HasForeignKey("Database.Main.Platform", "CreateEventId");

                    b.Navigation("CreateEvent");
                });

            modelBuilder.Entity("Database.Main.PlatformInterop", b =>
                {
                    b.HasOne("Database.Main.Address", "LocalAddress")
                        .WithMany("PlatformInterops")
                        .HasForeignKey("LocalAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Platform", "Platform")
                        .WithMany("PlatformInterops")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalAddress");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Database.Main.PlatformToken", b =>
                {
                    b.HasOne("Database.Main.Platform", "Platform")
                        .WithMany("PlatformTokens")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Database.Main.SaleEvent", b =>
                {
                    b.HasOne("Database.Main.Event", "Event")
                        .WithOne("SaleEvent")
                        .HasForeignKey("Database.Main.SaleEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.SaleEventKind", "SaleEventKind")
                        .WithMany("SaleEvents")
                        .HasForeignKey("SaleEventKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("SaleEventKind");
                });

            modelBuilder.Entity("Database.Main.SaleEventKind", b =>
                {
                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("SaleEventKinds")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("Database.Main.Series", b =>
                {
                    b.HasOne("Database.Main.Contract", "Contract")
                        .WithMany("Series")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Address", "CreatorAddress")
                        .WithMany("Serieses")
                        .HasForeignKey("CreatorAddressId");

                    b.HasOne("Database.Main.SeriesMode", "SeriesMode")
                        .WithMany("Series")
                        .HasForeignKey("SeriesModeId");

                    b.Navigation("Contract");

                    b.Navigation("CreatorAddress");

                    b.Navigation("SeriesMode");
                });

            modelBuilder.Entity("Database.Main.Signature", b =>
                {
                    b.HasOne("Database.Main.SignatureKind", "SignatureKind")
                        .WithMany("Signatures")
                        .HasForeignKey("SignatureKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Transaction", "Transaction")
                        .WithMany("Signatures")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SignatureKind");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Database.Main.StringEvent", b =>
                {
                    b.HasOne("Database.Main.Event", "Event")
                        .WithOne("StringEvent")
                        .HasForeignKey("Database.Main.StringEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Database.Main.Token", b =>
                {
                    b.HasOne("Database.Main.Address", "Address")
                        .WithMany("Tokens")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Chain", "Chain")
                        .WithMany("Tokens")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Event", "CreateEvent")
                        .WithOne("CreateToken")
                        .HasForeignKey("Database.Main.Token", "CreateEventId");

                    b.HasOne("Database.Main.Address", "Owner")
                        .WithMany("TokenOwners")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Chain");

                    b.Navigation("CreateEvent");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Database.Main.TokenDailyPrice", b =>
                {
                    b.HasOne("Database.Main.Token", "Token")
                        .WithMany("TokenDailyPrices")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Database.Main.TokenEvent", b =>
                {
                    b.HasOne("Database.Main.Event", "Event")
                        .WithOne("TokenEvent")
                        .HasForeignKey("Database.Main.TokenEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Token", "Token")
                        .WithMany("TokenEvents")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Database.Main.TokenLogo", b =>
                {
                    b.HasOne("Database.Main.Token", "Token")
                        .WithMany("TokenLogos")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.TokenLogoType", "TokenLogoType")
                        .WithMany("TokenLogos")
                        .HasForeignKey("TokenLogoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");

                    b.Navigation("TokenLogoType");
                });

            modelBuilder.Entity("Database.Main.TokenPriceState", b =>
                {
                    b.HasOne("Database.Main.Token", "Token")
                        .WithOne("TokenPriceState")
                        .HasForeignKey("Database.Main.TokenPriceState", "TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Database.Main.Transaction", b =>
                {
                    b.HasOne("Database.Main.Block", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Address", "GasPayer")
                        .WithMany("GasPayers")
                        .HasForeignKey("GasPayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Address", "GasTarget")
                        .WithMany("GasTargets")
                        .HasForeignKey("GasTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Address", "Sender")
                        .WithMany("Senders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.TransactionState", "State")
                        .WithMany("Transactions")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("GasPayer");

                    b.Navigation("GasTarget");

                    b.Navigation("Sender");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Database.Main.TransactionSettleEvent", b =>
                {
                    b.HasOne("Database.Main.Event", "Event")
                        .WithOne("TransactionSettleEvent")
                        .HasForeignKey("Database.Main.TransactionSettleEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Main.Platform", "Platform")
                        .WithMany("TransactionSettleEvents")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Database.Main.Address", b =>
                {
                    b.Navigation("AddressBalances");

                    b.Navigation("AddressEvents");

                    b.Navigation("AddressStake");

                    b.Navigation("AddressStorage");

                    b.Navigation("AddressTransactions");

                    b.Navigation("ChainAddressBlocks");

                    b.Navigation("Contracts");

                    b.Navigation("Events");

                    b.Navigation("GasEvents");

                    b.Navigation("GasPayers");

                    b.Navigation("GasTargets");

                    b.Navigation("NftOwnerships");

                    b.Navigation("Nfts");

                    b.Navigation("OrganizationAddresses");

                    b.Navigation("OrganizationEvents");

                    b.Navigation("PlatformInterops");

                    b.Navigation("Senders");

                    b.Navigation("Serieses");

                    b.Navigation("TokenOwners");

                    b.Navigation("Tokens");

                    b.Navigation("ValidatorAddressBlocks");
                });

            modelBuilder.Entity("Database.Main.AddressValidatorKind", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Database.Main.Block", b =>
                {
                    b.Navigation("BlockOracles");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Database.Main.Chain", b =>
                {
                    b.Navigation("AddressBalances");

                    b.Navigation("Addresses");

                    b.Navigation("Blocks");

                    b.Navigation("ChainEvents");

                    b.Navigation("Contracts");

                    b.Navigation("EventKinds");

                    b.Navigation("Events");

                    b.Navigation("MarketEventKinds");

                    b.Navigation("Nfts");

                    b.Navigation("SaleEventKinds");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Database.Main.Contract", b =>
                {
                    b.Navigation("ContractMethods");

                    b.Navigation("Events");

                    b.Navigation("Nfts");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Database.Main.ContractMethod", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Database.Main.Event", b =>
                {
                    b.Navigation("AddressEvent");

                    b.Navigation("ChainEvent");

                    b.Navigation("CreateContract");

                    b.Navigation("CreateOrganization");

                    b.Navigation("CreatePlatform");

                    b.Navigation("CreateToken");

                    b.Navigation("GasEvent");

                    b.Navigation("HashEvent");

                    b.Navigation("InfusionEvent");

                    b.Navigation("MarketEvent");

                    b.Navigation("OrganizationEvent");

                    b.Navigation("SaleEvent");

                    b.Navigation("StringEvent");

                    b.Navigation("TokenEvent");

                    b.Navigation("TransactionSettleEvent");
                });

            modelBuilder.Entity("Database.Main.EventKind", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Database.Main.Infusion", b =>
                {
                    b.Navigation("InfusionEvents");
                });

            modelBuilder.Entity("Database.Main.MarketEvent", b =>
                {
                    b.Navigation("MarketEventFiatPrice");
                });

            modelBuilder.Entity("Database.Main.MarketEventKind", b =>
                {
                    b.Navigation("MarketEvents");
                });

            modelBuilder.Entity("Database.Main.Nft", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("InfusedNfts");

                    b.Navigation("Infusions");

                    b.Navigation("NftOwnerships");
                });

            modelBuilder.Entity("Database.Main.Oracle", b =>
                {
                    b.Navigation("BlockOracles");
                });

            modelBuilder.Entity("Database.Main.Organization", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("OrganizationAddresses");

                    b.Navigation("OrganizationEvents");
                });

            modelBuilder.Entity("Database.Main.Platform", b =>
                {
                    b.Navigation("Externals");

                    b.Navigation("PlatformInterops");

                    b.Navigation("PlatformTokens");

                    b.Navigation("TransactionSettleEvents");
                });

            modelBuilder.Entity("Database.Main.SaleEventKind", b =>
                {
                    b.Navigation("SaleEvents");
                });

            modelBuilder.Entity("Database.Main.Series", b =>
                {
                    b.Navigation("Nfts");
                });

            modelBuilder.Entity("Database.Main.SeriesMode", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("Database.Main.SignatureKind", b =>
                {
                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("Database.Main.Token", b =>
                {
                    b.Navigation("AddressBalances");

                    b.Navigation("BaseSymbolInfusionEvents");

                    b.Navigation("BaseSymbolMarketEvents");

                    b.Navigation("Contract");

                    b.Navigation("Externals");

                    b.Navigation("InfusedSymbolInfusionEvents");

                    b.Navigation("Infusions");

                    b.Navigation("QuoteSymbolMarketEvents");

                    b.Navigation("TokenDailyPrices");

                    b.Navigation("TokenEvents");

                    b.Navigation("TokenLogos");

                    b.Navigation("TokenPriceState");
                });

            modelBuilder.Entity("Database.Main.TokenLogoType", b =>
                {
                    b.Navigation("TokenLogos");
                });

            modelBuilder.Entity("Database.Main.Transaction", b =>
                {
                    b.Navigation("AddressTransactions");

                    b.Navigation("Events");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("Database.Main.TransactionState", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
