// <auto-generated />
using System.Text.Json;
using Database.ApiCache;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.ApiCache.Migrations
{
    [DbContext(typeof(ApiCacheDatabaseContext))]
    partial class ApiCacheDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.ApiCache.Block", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("DATA")
                        .HasColumnType("jsonb");

                    b.Property<string>("HEIGHT")
                        .HasColumnType("text");

                    b.Property<long>("TIMESTAMP")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ChainId", "HEIGHT")
                        .IsUnique();

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Database.ApiCache.Chain", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("SHORT_NAME")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("SHORT_NAME")
                        .IsUnique();

                    b.ToTable("Chains");
                });

            modelBuilder.Entity("Database.ApiCache.Contract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<string>("HASH")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ChainId", "HASH")
                        .IsUnique();

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Database.ApiCache.Nft", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<JsonDocument>("CHAIN_API_RESPONSE")
                        .HasColumnType("jsonb");

                    b.Property<long>("CHAIN_API_RESPONSE_DM_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("OFFCHAIN_API_RESPONSE")
                        .HasColumnType("jsonb");

                    b.Property<long>("OFFCHAIN_API_RESPONSE_DM_UNIX_SECONDS")
                        .HasColumnType("bigint");

                    b.Property<string>("TOKEN_ID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ContractId", "TOKEN_ID")
                        .IsUnique();

                    b.ToTable("Nfts");
                });

            modelBuilder.Entity("Database.ApiCache.Block", b =>
                {
                    b.HasOne("Database.ApiCache.Chain", "Chain")
                        .WithMany("Blocks")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("Database.ApiCache.Contract", b =>
                {
                    b.HasOne("Database.ApiCache.Chain", "Chain")
                        .WithMany("Contracts")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("Database.ApiCache.Nft", b =>
                {
                    b.HasOne("Database.ApiCache.Contract", "Contract")
                        .WithMany("Nfts")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Database.ApiCache.Chain", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Database.ApiCache.Contract", b =>
                {
                    b.Navigation("Nfts");
                });
#pragma warning restore 612, 618
        }
    }
}
